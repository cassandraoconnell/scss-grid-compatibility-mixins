/* 
*   MIT License
*   Copyright (c) 2018 Cassandra O'Connell
*/

//  Contents:
//  1. display-grid
//  2. grid-area
//  3. grid-column
//  4. grid-column-end
//  5. grid-column-start
//  6. grid-row
//  7. grid-row-end
//  8. grid-row-start
//  9. grid-template
// 10. grid-template-columns
// 11. grid-template-rows

//  Note: Some mixins take different parameters than their CSS counterparts.
//  As a precaution, the compiler will throw an error if the extra parameters aren't defined.




// ========================= 1 =========================== //
//  Usage:
//  @include display-grid;
//
@mixin display-grid {
    display: grid;
    display: -ms-grid;
}
// ======================================================= //


// ========================= 2 =========================== //
//  Usage:
//  @include grid-area($start-row, $start-column, $end-row, $end-column);
//
//  @param { Number} - $start-row: Value of the row the element starts on.
//  @param { Number} - $start-column: Value of the column the element starts on.
//  @param { Number} - $end-row: Value of the row to end on. 
//  @param { Number} - $end-column: Value of the column to end on.
//
@mixin grid-area($start-row, $start-column, $end-row, $end-column) {
    @include grid-row-start(#{$start-row});
    @include grid-column-start(#{$start-column});
    @include grid-row-end(#{$end-row});
    @include grid-column-end(#{$end-column});
}
// ======================================================= //


// ========================= 3 =========================== //
//  Usage:
//  @include grid-column($start-column, $end-column);
//
//  @param { Number} - $start-column: Value of the column the element starts on.
//  @param { Number} - $end-column: Value of the column to end on. 
//
@mixin grid-column($start-column, $end-column) {
    $normal-syntax: $start-column slash() $end-column;

    @supports (grid-column-end: #{$end-column}) {
        grid-column: #{$normal-syntax};
    }

    @supports not (grid-column-end: #{$end-column}) {
        @include grid-column-start($start-column);
        @include grid-column-end($end-column, $start-column)
    }
}
// ======================================================= //


// ========================= 4 =========================== //
//  Usage:
//  @include grid-column-end($end-column, $start-column);
//
//  @param { Number} - $end-column: Value of the column to end on. 
//  @param { Number} - $start-column: Value of the column the element starts on.
//
@mixin grid-column-end($end-column, $start-column) {
    $column-span: $end-column - $start-column;

    @supports (grid-column-end: #{$end-column}) {
        grid-column-end: $end-column;
    }

    @supports (-ms-grid-column-span: #{$column-span}) {
        -ms-grid-column-span: $column-span;
    }

    @if $start-column == undefined {
        @error "Must specify `$start-column` to use `grid-column-end` mixin.";
    }
}
// ======================================================= //


// ========================= 5 =========================== //
//  Usage:
//  @include grid-column-start($start-column);
//
//  @param { Number} - $start-column: Value of the column the element starts on.
//
@mixin grid-column-start($start-column) {
    @supports (grid-column-start: #{$start-column}) {
        grid-column-start: $start-column;
    }

    @supports (-ms-grid-column: #{$start-column}) {
        -ms-grid-column: $start-column;
    }
}
// ======================================================= //


// ========================= 6 =========================== //
//  Usage:
//  @include grid-row($start-row, $end-row);
//
//  @param { Number} - $start-row: Value of the row the element starts on.
//  @param { Number} - $end-row: Value of the row to end on. 
//
@mixin grid-row($start-row, $end-row) {
    $normal-syntax: $start-row slash() $end-row;

    @supports (grid-row-end: #{$end-row}) {
        grid-row: #{$normal-syntax};
    }

    @supports not (grid-row-end: #{$end-row}) {
        @include grid-row-start($start-row);
        @include grid-row-end($end-row, $start-row);
    }
}
// ======================================================= //


// ========================= 7 =========================== //
//  Usage:
//  @include grid-row-end($end-row, $start-row);
//
//  @param { Number} - $end-row: Value of the row to end on. 
//  @param { Number} - $start-row: Value of the row the element starts on.
//
@mixin grid-row-end($end-row, $start-row) {
    $row-span: $end-row - $start-row;

    @supports (grid-row-end: #{$end-row}) {
        grid-row-end: $end-row;
    }

    @supports (-ms-grid-row-span: #{$row-span}) {
        -ms-grid-row-span: $row-span;
    }

    @if $start-row == undefined {
        @error "Must specify `$start-row` to use `grid-row-end` mixin.";
    }
}
// ======================================================= //


// ========================= 8 =========================== //
//  Usage:
//  @include grid-row-start($start-row);
//
//  @param { Number} - $start-row: Value of the row the element starts on.
//
@mixin grid-row-start($start-row) {
    @supports (grid-row-start: #{$start-row}) {
        grid-row-start: $start-row;
    }

    @supports (-ms-grid-row: #{$start-row}) {
        -ms-grid-row: $start-row;
    }
}
// ======================================================= //


// ========================= 9 =========================== //
//  Usage:
//  @include grid-template($template-columns, $template-rows);
//
//  @param { Number | String } - $template-columns: Value for column template.
//  @param { Number | String } - $template-rows: Value for row template.
//
@mixin grid-template($template-columns, $template-rows) {
    @include grid-template-columns($template-columns);
    @include grid-template-rows($template-rows);
}
// ======================================================= //


// ========================= 10 ========================== //
//  Usage:
//  @include grid-template-columns($value);
//
//  @param { Number | String } - $value: Number and sizing of columns in grid template (accepts repeat() and minmax())
//
@mixin grid-template-columns($value) {
    $parsed-value: parse-template-value($value);

    @supports (grid-template-columns: #{$value}) {
        grid-template-columns: $value;
    }

    @supports (-ms-grid-columns: #{$parsed-value}) {
        -ms-grid-columns: $parsed-value;
    }
}
// ======================================================= //


// ========================= 11 ========================== //
//  Usage:
//  @include grid-template-rows($value);
//
//  @param { Number | String } - $value: Number and sizing of rows in grid template (accepts repeat() and minmax())
//
@mixin grid-template-rows($value) {
    $parsed-value: parse-template-value($value);

    @supports (grid-template-rows: #{$value}) {
        grid-template-rows: $value;
    }

    @supports (-ms-grid-rows: #{$parsed-value}) {
        -ms-grid-rows: $parsed-value;
    }
}
// ======================================================= //




// ================= UTILITY FUNCTIONS ==================== //
@function parse-template-value($value-to-parse) {

    @if type-of($value: $value-to-parse) == 'number' {
        @return $value-to-parse;
    } @else if str-slice($string: $value-to-parse, $start-at: 1, $end-at: 6) == "repeat" {
        @return parse-repeat($value-to-parse)
    } @else if str-slice($string: $value-to-parse, $start-at: 1, $end-at: 6) == "minmax" {
        @return parse-minmax($value-to-parse)
    } @else {
        @error 'Error parsing template value.';
    };
};

@function parse-repeat($value) {
    $repetition-value-string-start: str-index($string: $value, $substring: "(") + 1;
    $repetition-value-string-end: str-index($string: $value, $substring: ",") - 1;
    $repetition-value: str-slice($string: $value, $start-at: $repetition-value-string-start, $end-at: $repetition-value-string-end);

    $size-value-string-start: str-index($string: $value, $substring: " ") + 1;
    $size-value-string-end: str-index($string: $value, $substring: ")") - 1;
    $size-value: str-slice($string: $value, $start-at: $size-value-string-start, $end-at: $size-value-string-end);

    $repetition: to-number($repetition-value);
    $size: to-number($size-value);
    $new-value: ();

    @for $i from 1 through $repetition {
        $new-value: append($list: $new-value, $val: $i, $separator: 'space')
    }
    
    @return $new-value;
}

// Unfinished.
@function parse-minmax($value) {

}

// Broken
@function to-number($value) {
    /* Simplified version of Hugo Giraudel's to-number Sass function, as seen here: https://www.sassmeister.com/gist/9fa19d254864f33d4a80 */
    @if type-of($value) != 'string' {
        @error 'Parameter for `to-number` function must be a string.'
    };

    $digits: 0;
    $result: 0;
    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

    @for $i from 1 through str-length($string: $value) {
        $character: str-slice($string: $value, $start-at: $i, $end-at: $i);
        $number: map-get($map: $numbers, $key: $character);

        $digits: 0;

        @if $digits == 1 {
            $result: $number;
        } @else {
            $digits: $digits * 10;
            $result: $result + ($number / $digits);
        }
    }
    
    @return $result;
};

@function slash() {
    @return unquote("/");
};
// ======================================================= //